"""
Django settings for customer_portal project.

Generated by 'django-admin startproject' using Django 4.0.3.
"""
import os
from pathlib import Path
import boto3
from botocore.config import Config
from django.urls import reverse_lazy
import environ

from app.customer_portal.utils import convert_file_size_str_to_num

env = environ.Env(
    DEBUG=(bool, False),
    CELERY_DEBUG=(bool, False),
    DEBUG_EMAIL_BACKEND=(bool, True),
    DEFAULT_FROM_EMAIL=(str, "noreply@getmobit.ru"),
    DJANGO_LOG_LEVEL=(str, "INFO"),

    FILE_UPLOAD_SIZE_LIMIT=(str, "0"),
    PRIVATE_URL_EXPIRES_IN_SECONDS=(int, 5),

    CELERY_BROKER_URL=(str, "redis://redis:6379/0"),
    CELERY_RESULT_BACKEND=(str, "redis://redis:6379/0"),
    MIN_PASSWORD_LENGTH=(int, 8)
)
# environ.Env.read_env()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
env_path = Path('.env')
if env_path.exists():
    environ.Env.read_env(env_path, overwrite=True)

SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
ALLOWED_HOSTS = ["*"]  # TODO
DOMAIN = env('DOMAIN')

CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in os.getenv("CSRF_TRUSTED_ORIGINS", "").split(",") if origin]  # TODO

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig',
    'customer_dashboard',
    'pages',
    'ckeditor',
    'ckeditor_uploader',
    'widget_tweaks',
    'storages',
    'django_celery_beat',
    'djcelery_email',
    'notifications'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'customer_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'customer_portal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'HOST': env('POSTGRES_HOST'),
        'PORT': env('POSTGRES_PORT'),
        'NAME': env('POSTGRES_DB'),
        'USER': env('POSTGRES_USER'),
        'PASSWORD': env('POSTGRES_PASSWORD')
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'users.CustomUser'

LOGIN_REDIRECT_URL = reverse_lazy('information')
LOGOUT_URL = reverse_lazy('logout')
LOGIN_URL = reverse_lazy('login')

# Yandex s3 storage settings
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')

AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
AWS_S3_ENDPOINT_URL = 'https://storage.yandexcloud.net'
AWS_S3_REGION_NAME = 'ru-central'

AWS_S3_FILE_BUFFER_SIZE = 5242880

AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

AWS_DEFAULT_ACL = "private"

AWS_PUBLIC_MEDIA_LOCATION = 'public'
DEFAULT_FILE_STORAGE = 'pages.yandex_s3_storage.ClientUserContentStorage'

AWS_PRIVATE_MEDIA_LOCATION = 'private'
PRIVATE_FILE_STORAGE = 'pages.yandex_s3_storage.PrivateClientUserContentStorage'

# time for expiring urls:
PRIVATE_URL_EXPIRES_IN_SECONDS = env('PRIVATE_URL_EXPIRES_IN_SECONDS')

aws_session = boto3.session.Session()
AWS_CLIENT = aws_session.client(
    "s3",
    region_name=AWS_S3_REGION_NAME,
    endpoint_url=AWS_S3_ENDPOINT_URL,
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
    config=Config(signature_version="s3"),
)

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGES = (
    ('ru', 'Русский'),
    ('en', 'English'),
)

LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

USE_L10N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/


CKEDITOR_ALLOW_NONIMAGE_FILES = False
CKEDITOR_UPLOAD_PATH = 'descriptions'

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Styles', 'Format', 'Bold', 'Italic', 'Underline', '-', 'Link', '-', 'NumberedList', 'BulletedList',
             'RemoveFormat', 'HorizontalRule', '-', 'Undo', 'Redo'],

            ['PasteFromWord', 'PasteText', 'Flash', 'HorizontalRule'],
            ['Smiley', 'TextColor', 'BGColor'],
        ]
    }
}

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': env('DJANGO_LOG_LEVEL'),
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': env('DJANGO_LOG_LEVEL'),
            'propagate': False,
        },
        "botocore": {
            "level": env('DJANGO_LOG_LEVEL'),
            "handlers": ["console"],
            "propagate": False
        },
        "boto3": {
            "level": env('DJANGO_LOG_LEVEL'),
            "handlers": ["console"],
            "propagate": False
        },
    },
}

FILE_UPLOAD_SIZE_LIMIT = convert_file_size_str_to_num(env("FILE_UPLOAD_SIZE_LIMIT"))

# django_celery_beat
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
CELERY_DEBUG = env("CELERY_DEBUG")
CELERY_TIMEZONE = 'Europe/Moscow'
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Getmobit email configurations
if env("DEBUG_EMAIL_BACKEND"):
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'

EMAIL_HOST = env("SMTP_HOST")
EMAIL_HOST_USER = env("SMTP_USER")
EMAIL_HOST_PASSWORD = env("SMTP_PASSWORD")
EMAIL_PORT = env("SMTP_PORT")
EMAIL_USE_TLS = env("SMTP_USE_TLS")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL")

#  User password validator
#  https://docs.djangoproject.com/en/4.1/topics/auth/passwords/#enabling-password-validation
MIN_PASSWORD_LENGTH = env("MIN_PASSWORD_LENGTH")
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': MIN_PASSWORD_LENGTH,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
